Type,Tool_OCL,GroundTruth_OCL
TP,pre: true,pre: true
TP,post: true,post: true
TP,activity:,activity:
TP,"( var self : Mapper<T,V> ;","( var self : Mapper<T,V> ;"
TP,"self := createMapper<T,V>();","self := createMapper<T,V>();"
TP,return self );,return self );
TP,pre: true  post: true,pre: true  post: true
TP,activity: skip;,activity: skip;
TP,activity: (     for (currentItem : arr) do ( (     if (item = currentItem) then (     return true ) else skip )  ) ;,activity: (     for (currentItem : arr) do ( (     if (item = currentItem) then (     return true ) else skip )  ) ;
TP,return false );,return false );
TP,},}
TP,interface Expandable<T> {,interface Expandable<T> {
TP,operation addItem( item : T) : void,operation addItem( item : T) : void
TP,post: true;,post: true;
TP,class Array<T> implements Expandable<T> {,class Array<T> implements Expandable<T> {
TP,class IntegerArray implements Expandable<int> {,class IntegerArray implements Expandable<int> {
TP,operation addItem( item : int) : void,operation addItem( item : int) : void
FP,"class Mapper<T,V> {",
FP,"static operation newMapper( array : T, item : V) : Mapper<T,V>",
FP,"self.initialise(array, item);",
FP,"operation initialise( array : T, item : V) : void",
FP,"static   operation contains( item : T, arr : Sequence(V)) : boolean",
FN,,class Mapper {
FN,,"static operation newMapper<T,V>( array : T, item : V) : Mapper<T,V>"
FN,,"self.initialise<T,V>(array, item);"
FN,,"operation initialise<T,V>( array : T, item : V) : void"
FN,,"static   operation contains<T,V>( item : T, arr : Sequence(V)) : boolean"
