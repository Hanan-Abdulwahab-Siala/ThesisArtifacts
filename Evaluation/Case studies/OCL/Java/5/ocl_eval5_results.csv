Type,Tool_OCL,GroundTruth_OCL
TP,class HelloWorld {,class HelloWorld {
TP,static   operation main( args : Sequence(String)) : void,static   operation main( args : Sequence(String)) : void
TP,pre: true,pre: true
TP,post: true,post: true
TP,var xEnc : XMLEncoder := XMLEncoder.newXMLEncoder(fos) ;,var xEnc : XMLEncoder := XMLEncoder.newXMLEncoder(fos) ;
TP,if (obj = null) then (     error NullAccessException() ) else skip ;,if (obj = null) then (     error NullAccessException() ) else skip ;
TP,execute doSomethingWithObject(obj) ;,execute doSomethingWithObject(obj) ;
TP,assert n /= 0 ;,assert n /= 0 ;
TP,"assert n /= 0 do ""n was equal to zero"" ;","assert n /= 0 do ""n was equal to zero"" ;"
TP,"var numbers : Sequence(int) ; numbers := Integer.subrange(1,5)->collect(0) ;","var numbers : Sequence(int) ; numbers := Integer.subrange(1,5)->collect(0) ;"
TP,numbers[0+1] := 2 ;,numbers[0+1] := 2 ;
TP,var x : int ; x := numbers[0+1] ;,var x : int ; x := numbers[0+1] ;
TP,"var numbers : Sequence(int) ; numbers := Sequence{20,1,42,15,34} ;","var numbers : Sequence(int) ; numbers := Sequence{20,1,42,15,34} ;"
TP,"var numbers2 : Sequence(int) ; numbers2 := Sequence{20,1,42,15,34} ;","var numbers2 : Sequence(int) ; numbers2 := Sequence{20,1,42,15,34} ;"
TP,numbers[1+1][2+1] := 2 ;,numbers[1+1][2+1] := 2 ;
TP,"numbers[0+1] := Integer.subrange(1,3)->collect(0) ;","numbers[0+1] := Integer.subrange(1,3)->collect(0) ;"
TP,"numbers[1+1] := Integer.subrange(1,2)->collect(0) ;","numbers[1+1] := Integer.subrange(1,2)->collect(0) ;"
TP,numbers[0+1][0+1] := numbers[0+1][0+1] + 1 ;,numbers[0+1][0+1] := numbers[0+1][0+1] + 1 ;
TP,numbers[0+1][0+1] := numbers[0+1][0+1] - 1 ;,numbers[0+1][0+1] := numbers[0+1][0+1] - 1 ;
TP,foo()[0+1] := foo()[0+1] + 1 ;,foo()[0+1] := foo()[0+1] + 1 ;
TP,foo()[0+1] := foo()[0+1] - 1 ;,foo()[0+1] := foo()[0+1] - 1 ;
TP,);,);
TP,},}
TP,<EOF>,<EOF>
FP,activity: (     try (     execute methodThrowingExceptions() )   catch (ex : OclException) do (     execute reportException(ex) ),
FP,(     execute freeResources() ),
FP,"try (    var fos : OclFile := OclFile.newOclFile_Write(OclFile(""filename"")) ;",
FP,"(     xEnc.writeObject(object) ))   catch (ex : OclException) do (     Logger.getLogger(OclType[""Serializer""].getName()).log(Level.SEVERE, null, ex) )",
FP,execute synchronize(someObject) ;,
FP,"numbers := Integer.subrange(1,3)->collect(Integer.subrange(1,3)->collect(0)) ;",
FP,"numbers2 := Sequence{Sequence{2,3,2},Sequence{1,2,6},Sequence{2,4,5}} ;",
FP,"numbers := Integer.subrange(1,2)->collect(null) ;",
FN,,activity: (     try (     execute methodThrowingExceptions() )   catch (ex : ProgramException) do (     execute reportException(ex) )
FN,,finally (     execute freeResources() )
FN,,try (     execute methodThrowingExceptions() )   catch (ex : OclException) do (     execute reportException(ex) )
FN,,"try (    var fos : OclFile := OclFile.newOclFile_Write(OclFile.newOclFile(""filename"")) ;"
FN,,"(     xEnc.writeObject(object) ))   catch (ex : IOException) do (     Logger.getLogger(OclType[""Serializer""].getName()).log(Level.SEVERE, null, ex) )"
FN,,skip
FN,,"var numbers : Sequence(Sequence(int)) ; numbers := Integer.subrange(1,3)->collect(Integer.subrange(1,3)->collect(0)) ;"
FN,,"var numbers2 : Sequence(Sequence(int)) ; numbers2 := Sequence{Sequence{2,3,2},Sequence{1,2,6},Sequence{2,4,5}} ;"
FN,,"var numbers : Sequence(Sequence(int)) ; numbers := Integer.subrange(1,2)->collect(Sequence{}) ;"
