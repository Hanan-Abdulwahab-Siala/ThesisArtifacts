class Foo {
   static operation newFoo() : Foo
  pre: true
  post: true
  activity:
  ( var self : Foo ;
    self := createFoo();
    self.initialise();
    return self );
  operation initialise() : void
  pre: true  post: true
  activity: (     OclFile["System.out"].println(OclType["Foo"].getName() + ": constructor runtime") );
   static operation newFoo( a : int, b : int) : Foo
  pre: true
  post: true
  activity:
  ( var self : Foo ;
    self := createFoo();
    self.initialise(a, b);
    return self );
  operation initialise( a : int, b : int) : void
  pre: true  post: true
  activity: (     OclFile["System.out"].println(OclType["Foo"].getName() + ": overloaded constructor " + self) );
   operation bar( a : int, b : int) : int
  pre: true
  post: true
  activity: (     return (a * 2) + b );
   operation bar( a : int) : int
  pre: true
  post: true
  activity: (     return a * 2 );
   operation openStream() : void
  pre: true
  post: true
  activity: skip;
   operation printReport( header : String, numbers : Sequence(int)) : void
  pre: true
  post: true
  activity: (     OclFile["System.out"].println(header) ;
     for (num : numbers) do ( (     OclFile["System.out"].println(num) )  ) );
}